{"version":3,"sources":["components/header/Header.style.jsx","components/header/Header.jsx","components/inputlist/input.style.jsx","components/inputlist/Input.jsx","components/inputlist/InputList.jsx","components/main-wrapper/WrapperMain.jsx","components/tasklist/task.style.jsx","components/tasklist/Task.jsx","components/tasklist/TaskList.jsx","App.js","index.js"],"names":["colors","Title","styled","h1","ButtonHeader","button","Wrapper","div","props","row","Header","toggleInputDisplay","showInputField","onClick","style","backgroundColor","LabelInput","label","InputText","input","InputWrapper","Input","placeholder","change","value","onChange","e","target","type","InputList","addTask","useState","taskNew","setTaskNew","date","setDate","display","newText","task","id","Date","now","isDone","alert","WrapperMain","TaskDate","p","TaskTitle","TaskWrapper","status","css","Task","item","toggleIsDone","setIsDone","TaskList","taskArray","filter","length","map","App","tasks","setTasks","setShowInputField","className","newTask","idtarget","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.931a1b97.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const colors = {\r\n    color1: \"#33B864\",\r\n    color1dark: \"#677A04\",\r\n    color2: \"#FFE5AD\",\r\n    color3: \"lightgrey\",\r\n};\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 4rem;\r\n    color: ${colors.color1};\r\n    display: inline-block;\r\n    margin: 0 auto;\r\n\r\n    transition: all 0.3s;\r\n    &:hover {\r\n        color: ${colors.color1dark};\r\n    }\r\n`;\r\n\r\nexport const ButtonHeader = styled.button`\r\n    font-size: 2rem;\r\n    color: ${colors.color1};\r\n    display: inline-block;\r\n    border: none;\r\n    background-color: ${colors.color2};\r\n    padding: 1rem 2rem;\r\n    margin: 0 auto;\r\n    border-radius: 0.5rem;\r\n    cursor: pointer;\r\n\r\n    transition: all 0.3s;\r\n    &:hover {\r\n        color: ${colors.color1dark};\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 2rem 0;\r\n    display: flex;\r\n    gap: 2rem;\r\n    align-items: center;\r\n    flex-direction: ${(props) => (props.row ? \"row\" : \"column\")};\r\n    /* flex-direction: column; */\r\n    font-size: 2rem;\r\n`;\r\n","import React from \"react\";\r\nimport { ButtonHeader, Title, Wrapper } from \"./Header.style\";\r\nimport { colors } from \"./Header.style\";\r\n\r\nfunction Header({ toggleInputDisplay, showInputField }) {\r\n    return (\r\n        <Wrapper>\r\n            <Title>Task Tracker</Title>\r\n            <ButtonHeader\r\n                onClick={toggleInputDisplay}\r\n                style={{\r\n                    backgroundColor: `${\r\n                        showInputField ? colors.color2 : colors.color3\r\n                    }`,\r\n                }}\r\n            >\r\n                {showInputField ? \"Hide Task Bar\" : \"Show Task Bar\"}\r\n            </ButtonHeader>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const LabelInput = styled.label`\r\n    font-size: 1.8rem;\r\n    color: black;\r\n    font-weight: bolder;\r\n`;\r\n\r\nexport const InputText = styled.input`\r\n    font-size: 2rem;\r\n    width: 40rem;\r\n    padding: 0.5rem 1rem;\r\n`;\r\n\r\nexport const InputWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n`;\r\n","import React from \"react\";\r\nimport { LabelInput, InputText, InputWrapper } from \"./input.style\";\r\n\r\nfunction Input({ label, placeholder, change, value }) {\r\n    return (\r\n        <InputWrapper>\r\n            <LabelInput>{label}</LabelInput>\r\n            <InputText\r\n                onChange={(e) => {\r\n                    change(e.target.value);\r\n                }}\r\n                placeholder={placeholder}\r\n                type=\"text\"\r\n                value={value}\r\n            ></InputText>\r\n        </InputWrapper>\r\n    );\r\n}\r\n\r\nexport default Input;\r\n","import React, { useState } from \"react\";\r\nimport { ButtonHeader, Wrapper } from \"../header/Header.style\";\r\nimport Input from \"./Input\";\r\n\r\nfunction InputList({ addTask, showInputField }) {\r\n    const [taskNew, setTaskNew] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n\r\n    const handleTaskNewChange = (newText) => setTaskNew(newText);\r\n    const handleDateChange = (newText) => setDate(newText);\r\n    const handleSubmit = () => {\r\n        if (!taskNew || !date) {\r\n            alert(\"Please fill both fields\");\r\n            return;\r\n        }\r\n        const id = Date.now();\r\n        const task = {\r\n            id: id,\r\n            task: taskNew,\r\n            date: date,\r\n            isDone: false,\r\n        };\r\n        setTaskNew(\"\");\r\n        setDate(\"\");\r\n        addTask(task);\r\n    };\r\n    return (\r\n        <Wrapper\r\n            style={showInputField ? { display: \"flex\" } : { display: \"none\" }}\r\n        >\r\n            <Input\r\n                label=\"Task\"\r\n                placeholder=\"Enter a task\"\r\n                change={handleTaskNewChange}\r\n                value={taskNew}\r\n            />\r\n            <Input\r\n                label=\"Date and Time\"\r\n                placeholder=\"Feb 5th at 2:30pm\"\r\n                change={handleDateChange}\r\n                value={date}\r\n            />\r\n            <ButtonHeader onClick={handleSubmit}>Add Task</ButtonHeader>\r\n            {/* {console.log(taskNew, date)} */}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default InputList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const WrapperMain = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    padding: 2rem;\r\n    background-image: linear-gradient(135deg, #90f7ec 10%, #32ccbc 100%);\r\n    max-width: 50rem;\r\n    margin: 2rem auto;\r\n    border-radius: 1rem;\r\n    box-shadow: 0 3rem 4rem hsla(0, 0%, 0%, 0.3);\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\nimport { colors } from \"../header/Header.style\";\r\n\r\nexport const TaskDate = styled.p`\r\n    font-size: 1.5rem;\r\n    color: black;\r\n    /* width: 35rem; */\r\n`;\r\n\r\nexport const TaskTitle = styled(TaskDate)`\r\n    color: black;\r\n    font-weight: bolder;\r\n    letter-spacing: 1px;\r\n    font-size: 2rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin: 0rem 0 1rem;\r\n    span {\r\n        display: flex;\r\n        gap: 1rem;\r\n\r\n        & > * {\r\n            color: gray;\r\n            cursor: pointer;\r\n\r\n            &:last-child {\r\n                color: red;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TaskWrapper = styled.div`\r\n    background-color: ${colors.color1};\r\n    padding: 1rem 2rem;\r\n    width: 40rem;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 2rem 2rem hsla(0, 0%, 0%, 0.3);\r\n    cursor: pointer;\r\n    user-select: none;\r\n    ${(props) =>\r\n        props.status &&\r\n        css`\r\n            border-left: solid 0.5rem red;\r\n            background-color: ${colors.color3};\r\n            text-decoration: line-through solid red;\r\n            text-decoration-thickness: 20%;\r\n        `}\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { TaskDate, TaskTitle, TaskWrapper } from \"./task.style\";\r\n\r\nimport { FaTimes, FaTrashAlt, FaThumbsUp } from \"react-icons/fa\";\r\n\r\nfunction Task({ item, toggleIsDone }) {\r\n    const [isDone, setIsDone] = useState(false);\r\n\r\n    return (\r\n        <TaskWrapper onClick={() => setIsDone(!isDone)} status={isDone}>\r\n            <TaskTitle>\r\n                {item.task}{\" \"}\r\n                <span>\r\n                    {\" \"}\r\n                    <FaTimes onClick={() => toggleIsDone(item.id)} />{\" \"}\r\n                </span>\r\n            </TaskTitle>\r\n            <TaskDate>{item.date}</TaskDate>\r\n        </TaskWrapper>\r\n    );\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"../header/Header.style\";\r\nimport Task from \"./Task\";\r\n\r\nfunction TaskList({ taskArray, toggleIsDone }) {\r\n    return (\r\n        <Wrapper>\r\n            {taskArray.filter((item) => !item.isDone).length === 0\r\n                ? \"No task to show\"\r\n                : taskArray.map(\r\n                      (item) =>\r\n                          !item.isDone && (\r\n                              <Task\r\n                                  key={item.id}\r\n                                  item={item}\r\n                                  toggleIsDone={toggleIsDone}\r\n                              />\r\n                          )\r\n                  )}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default TaskList;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\n\nimport Header from \"./components/header/Header\";\nimport InputList from \"./components/inputlist/InputList\";\nimport { WrapperMain } from \"./components/main-wrapper/WrapperMain\";\nimport TaskList from \"./components/tasklist/TaskList\";\n\nconst taskArray = [\n    {\n        id: \"1\",\n        task: \"Study React\",\n        date: \"Feb 5th at 2:30pm\",\n        isDone: false,\n    },\n    {\n        id: \"2\",\n        task: \"Study Javascript\",\n        date: \"Feb 5th at 6:30pm\",\n        isDone: false,\n    },\n];\n\nfunction App() {\n    // Hooks\n    const [tasks, setTasks] = useState(taskArray);\n    const [showInputField, setShowInputField] = useState(true);\n\n    // Functions\n    const addTask = (newTask) => setTasks([...tasks, newTask]);\n    const toggleInputDisplay = () => setShowInputField(!showInputField);\n\n    const toggleIsDone = (idtarget) => {\n        setTasks(\n            tasks.map((task) =>\n                task.id === idtarget ? { ...task, isDone: !task.isDone } : task\n            )\n        );\n    };\n\n    return (\n        <div className=\"App\">\n            <WrapperMain>\n                <Header\n                    toggleInputDisplay={toggleInputDisplay}\n                    showInputField={showInputField}\n                />\n                <InputList addTask={addTask} showInputField={showInputField} />\n                <TaskList taskArray={tasks} toggleIsDone={toggleIsDone} />\n            </WrapperMain>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}